// EfxMfc.cpp : Defines the initialization routines for the DLL.
//

#include "pch.h"
#include "framework.h"
#include "resource.h"		// main symbols
#include "EfxWnd.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


typedef	CMap<UINT, UINT, CEfxWnd*, CEfxWnd*>	CEfxWndMap;


// CEfxMfcApp
// See EfxMfc.cpp for the implementation of this class
//

class CEfxMfcApp : public CWinApp
{
public:
	CEfxMfcApp();

	AFX_INLINE CEfxWnd* GetEfxWnd() const { return m_pEfxWnd; }

	void SetSysMsgCallback(efxSysMsgCB fnSysMsg);
	void InsertEfxWnd(UINT uID, CEfxWnd* pEfxWnd);
	void OnEfxExit();

	static UINT		m_efxSeqNo;
	CString			m_strEfxDir;

private:
	CEfxWnd*		m_pEfxWnd;		// default CEfxWnd
	CEfxWndMap		m_mapEfxWnd;
	CWnd			m_wndEfxMain;

	// Overrides
public:
	virtual BOOL InitInstance();
	virtual int ExitInstance();

	DECLARE_MESSAGE_MAP()
};

BEGIN_MESSAGE_MAP(CEfxMfcApp, CWinApp)
END_MESSAGE_MAP()


UINT CEfxMfcApp::m_efxSeqNo = 1;

// CEfxMfcApp construction

CEfxMfcApp::CEfxMfcApp() : m_pEfxWnd(nullptr)
{
	// TODO: add construction code here,
	// Place all significant initialization in InitInstance
}


// The one and only CEfxMfcApp object

CEfxMfcApp theApp;


// CEfxMfcApp initialization

BOOL CEfxMfcApp::InitInstance()
{
	CWinApp::InitInstance();
	AfxEnableControlContainer();
	CoInitialize(NULL);

	WNDCLASS wndcls;
	ZeroMemory(&wndcls, sizeof(WNDCLASS));
	wndcls.style = CS_DBLCLKS | CS_HREDRAW | CS_VREDRAW;
	wndcls.lpfnWndProc = ::DefWindowProc; 
	wndcls.hInstance = AfxGetInstanceHandle();
	wndcls.hIcon = nullptr;
	wndcls.hCursor = nullptr;
	wndcls.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wndcls.lpszMenuName = NULL;
	wndcls.lpszClassName = _T("EfxMfc Window Class");
	if (!AfxRegisterClass(&wndcls)) {
		printf("Class Registration Failed!\n");
		return FALSE;
	}

	UINT _seqNo = InterlockedExchangeAdd(&m_efxSeqNo, 1);
	//printf("_seqNo = %d, m_efxSeqNo = %d\n", _seqNo, m_efxSeqNo);
	if (!m_wndEfxMain.CreateEx(0, wndcls.lpszClassName, _T("EfxMfc Main"), WS_POPUP, CRect(0, 0, 0, 0), nullptr, 0)) {
		printf("Create Window Failed!(Err: %x)\n", GetLastError());
		return FALSE;
	}
	m_pMainWnd = &m_wndEfxMain;

	m_pEfxWnd = new CEfxWnd();
	if (!m_pEfxWnd->Create(&m_wndEfxMain, _seqNo))
		return FALSE;
	m_mapEfxWnd.SetAt(_seqNo, m_pEfxWnd);

	return TRUE;
}

int CEfxMfcApp::ExitInstance()
{
	//printf("CEfxMfcApp::ExitInstance()\n");
	return CWinApp::ExitInstance();
}

void CEfxMfcApp::SetSysMsgCallback(efxSysMsgCB fnSysMsg)
{
	if (m_pEfxWnd)
		m_pEfxWnd->m_fnSysMsg = fnSysMsg;
}

void CEfxMfcApp::InsertEfxWnd(UINT uID, CEfxWnd* pEfxWnd)
{
	m_mapEfxWnd.SetAt(uID, pEfxWnd);
}

void CEfxMfcApp::OnEfxExit()
{
	if (m_pEfxWnd)
		m_pEfxWnd->OnReceiveSysMessage(4);

	UINT id;
	CEfxWnd* pEfxWnd;
	POSITION pos = m_mapEfxWnd.GetStartPosition();
	while (pos) {
		m_mapEfxWnd.GetNextAssoc(pos, id, pEfxWnd);
		pEfxWnd->DestroyWindow();
		delete pEfxWnd;
	}
	m_mapEfxWnd.RemoveAll();
	m_wndEfxMain.DestroyWindow();
}


// EfxMfc Impl

int efxInit(LPCSTR lpszEFXDir, efxSysMsgCB fnSysMsg)
{
	if (!IsUserAnAdmin()) {
		printf("EfxInit: Administrative Privileges Required!\n");
		return -1;
	}
	if (!lpszEFXDir || !lpszEFXDir[0])
		theApp.m_strEfxDir = _T("C:\\eFriend Expert");
	else {
		WCHAR wszEfxDir[MAX_PATH];
		Utf8ToWideChar(wszEfxDir, _countof(wszEfxDir), lpszEFXDir);
		theApp.m_strEfxDir = wszEfxDir;
	}
	if (!theApp.m_strEfxDir.IsEmpty() && theApp.m_strEfxDir.Right(1) != _T("\\"))
		theApp.m_strEfxDir += _T("\\");
	theApp.SetSysMsgCallback(fnSysMsg);

	return 0;
}

void efxExit(void)
{
	theApp.OnEfxExit();
}

int efxProcessMessage(UINT uMilliSec)
{
	MSG msg;
	int nMsgCount = 0;
	while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
		if (msg.message == WM_QUIT)
			return 0;
		TranslateMessage(&msg);
		DispatchMessage(&msg);
		++nMsgCount;
	}
	Sleep(uMilliSec);
	return nMsgCount;
}

void efxMessageLoop(void)
{
	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0)) {
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
}

void efxQuit(int nExitCode)
{
	PostQuitMessage(nExitCode);
}

HANDLE efxNewControl(UINT uCtrlID, efxEventCB fnRecvData, efxEventCB fnRecvRealData, efxEventCB fnError)
{
	//AFX_MANAGE_STATE(AfxGetStaticModuleState( ));
	UINT _seqNo = InterlockedExchangeAdd(&CEfxMfcApp::m_efxSeqNo, 1);
	auto pEfxWnd = new CEfxWnd();
	if (!pEfxWnd->Create(theApp.GetMainWnd(), uCtrlID, fnRecvData, fnRecvRealData, fnError))
		return nullptr;
	theApp.InsertEfxWnd(_seqNo, pEfxWnd);
	return pEfxWnd;
}

int efxGetAccountCount(void)
{
	auto pEfxWnd = theApp.GetEfxWnd();
	if (pEfxWnd)
		return pEfxWnd->GetAccountCount();
	return 0;
}

int efxGetAccount(int nIdx, LPSTR lpszAccount)
{
	auto pEfxWnd = theApp.GetEfxWnd();
	if (!pEfxWnd)
		return 0;
	CString strAccount = pEfxWnd->GetAccount(nIdx);
	size_t buff_len = strAccount.GetLength() + 1;
	return WideCharToUtf8(lpszAccount, buff_len, strAccount);
}

int efxGetAccountBrcode(LPCSTR lpszAcntNo, LPSTR lpszBrcode)
{
	auto pEfxWnd = theApp.GetEfxWnd();
	if (!pEfxWnd)
		return 0;
	WCHAR wszTemp[32] = { 0 };
	int nLen = Utf8ToWideChar(wszTemp, _countof(wszTemp), lpszAcntNo);
	CString strBrcode = pEfxWnd->GetAccountBrcode(wszTemp);
	size_t buff_len = strBrcode.GetLength() + 1;
	return WideCharToUtf8(lpszBrcode, buff_len, strBrcode);
}

int efxGetEncryptPassword(LPCSTR lpszPwd, LPSTR lpszEncrypt)
{
	auto pEfxWnd = theApp.GetEfxWnd();
	if (!pEfxWnd)
		return 0;
	WCHAR wszTemp[256] = { 0 };
	int nLen = Utf8ToWideChar(wszTemp, _countof(wszTemp), lpszPwd);
	CString strEncrypt = pEfxWnd->GetEncryptPassword(wszTemp);
	size_t buff_len = strEncrypt.GetLength() + 1;
	return WideCharToUtf8(lpszEncrypt, buff_len, strEncrypt);
}

void efxAboutBox(void)
{
	auto pEfxWnd = theApp.GetEfxWnd();
	if (pEfxWnd)
		pEfxWnd->AboutBox();
}

void efxSetSingleData(HANDLE hCtrl, int nIndex, LPCSTR lpszData)
{
	//printf("lpszData: %s\n", lpszData);
	auto pEfxWnd = reinterpret_cast<CEfxWnd*>(hCtrl);
	wchar_t wszData[256] = { 0 };
	Utf8ToWideChar(wszData, _countof(wszData), lpszData);
	pEfxWnd->SetSingleData(nIndex, wszData);
}

void efxRequestData(HANDLE hCtrl, LPCSTR lpszQryName, LPCSTR lpszParam)
{
	auto pEfxWnd = reinterpret_cast<CEfxWnd*>(hCtrl);
	wchar_t wszQryName[16] = { 0 };
	Utf8ToWideChar(wszQryName, _countof(wszQryName), lpszQryName);
	pEfxWnd->RequestData(wszQryName);
	int nRqId = pEfxWnd->GetSendRqID();
	pEfxWnd->GetReqIdTbl().SetItem(nRqId, lpszQryName, lpszParam);
}

int efxIsMoreNextData(HANDLE hCtrl)
{
	auto pEfxWnd = reinterpret_cast<CEfxWnd*>(hCtrl);
	return pEfxWnd->IsMoreNextData();
}

void efxRequestNextData(HANDLE hCtrl, LPCSTR lpszQryName)
{
	auto pEfxWnd = reinterpret_cast<CEfxWnd*>(hCtrl);
	wchar_t wszQryName[16] = { 0 };
	Utf8ToWideChar(wszQryName, _countof(wszQryName), lpszQryName);
	pEfxWnd->RequestNextData(wszQryName);
}

int efxGetSingleFieldCount(HANDLE hCtrl)
{
	auto pEfxWnd = reinterpret_cast<CEfxWnd*>(hCtrl);
	return pEfxWnd->GetSingleFieldCount();
}

int efxGetSingleData(HANDLE hCtrl, LPSTR lpszData, int nIndex, int nAttrType)
{
	auto pEfxWnd = reinterpret_cast<CEfxWnd*>(hCtrl);
	CString strData;
	pEfxWnd->GetSingleData(strData, nIndex, nAttrType);
	return WideCharToUtf8(lpszData, strData.GetLength() + 1, strData);
}
